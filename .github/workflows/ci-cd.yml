name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  release:
    types: [published]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Test Backend
  test-backend:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        working-directory: ./server
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio

      - name: Run linting
        working-directory: ./server
        run: |
          pip install flake8 black isort
          flake8 app --max-line-length=88 --exclude=migrations
          black --check app
          isort --check-only app

      - name: Run type checking
        working-directory: ./server
        run: |
          pip install mypy
          mypy app --ignore-missing-imports

      - name: Run tests
        working-directory: ./server
        env:
          DATABASE_URL: postgresql://postgres:test_password@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379/0
          JWT_SECRET_KEY: test_secret_key
          ENVIRONMENT: testing
        run: |
          pytest tests/ -v --cov=app --cov-report=xml --cov-report=html

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./server/coverage.xml
          flags: backend
          name: backend-coverage

  # Test Frontend
  test-frontend:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: ./client/package-lock.json

      - name: Install dependencies
        working-directory: ./client
        run: npm ci

      - name: Run linting
        working-directory: ./client
        run: npm run lint

      - name: Run type checking
        working-directory: ./client
        run: |
          npm install --save-dev typescript @types/react @types/react-dom
          npx tsc --noEmit

      - name: Run tests
        working-directory: ./client
        run: npm run test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./client/coverage/coverage-final.json
          flags: frontend
          name: frontend-coverage

      - name: Build application
        working-directory: ./client
        env:
          VITE_API_URL: ${{ secrets.VITE_API_URL || 'https://api.example.com' }}
          VITE_WS_URL: ${{ secrets.VITE_WS_URL || 'wss://api.example.com' }}
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-dist
          path: ./client/dist/

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --file=./client/package.json

  # Build and Push Docker Images
  build-and-push:
    needs: [test-backend, test-frontend, security-scan]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        service: [backend, frontend]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service == 'backend' && 'server' || 'client' }}
          file: ./${{ matrix.service == 'backend' && 'server' || 'client' }}/Dockerfile.prod
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VITE_API_URL=${{ secrets.VITE_API_URL }}
            VITE_WS_URL=${{ secrets.VITE_WS_URL }}
            VITE_APP_VERSION=${{ github.sha }}

  # Deploy to Staging
  deploy-staging:
    needs: [build-and-push]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USERNAME }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          script: |
            cd /opt/ai-language-platform
            git pull origin develop
            
            # Update environment variables
            echo "${{ secrets.STAGING_ENV }}" > .env
            
            # Pull latest images
            docker-compose -f docker-compose.staging.yml pull
            
            # Deploy with zero downtime
            docker-compose -f docker-compose.staging.yml up -d --remove-orphans
            
            # Run database migrations
            docker-compose -f docker-compose.staging.yml exec -T backend python app/init_db.py
            
            # Health check
            sleep 30
            curl -f http://localhost/health || exit 1

  # Deploy to Production
  deploy-production:
    needs: [build-and-push]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create deployment
        uses: actions/github-script@v6
        id: deployment
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'production',
              required_contexts: [],
              auto_merge: false
            });
            return deployment.data.id;

      - name: Deploy to production
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USERNAME }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          script: |
            cd /opt/ai-language-platform
            
            # Backup current deployment
            docker-compose -f docker-compose.prod.yml exec -T postgres pg_dump -U postgres ai_language_platform > backup-$(date +%Y%m%d_%H%M%S).sql
            
            # Pull latest code
            git pull origin main
            
            # Update environment variables
            echo "${{ secrets.PRODUCTION_ENV }}" > .env
            
            # Pull latest images
            docker-compose -f docker-compose.prod.yml pull
            
            # Deploy with zero downtime using blue-green strategy
            docker-compose -f docker-compose.prod.yml up -d --remove-orphans --scale backend=2
            
            # Wait for new containers to be healthy
            sleep 60
            
            # Run database migrations
            docker-compose -f docker-compose.prod.yml exec -T backend python app/init_db.py
            
            # Scale down old containers
            docker-compose -f docker-compose.prod.yml up -d --remove-orphans
            
            # Health check
            sleep 30
            curl -f https://yourdomain.com/health || exit 1

      - name: Update deployment status (success)
        if: success()
        uses: actions/github-script@v6
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.deployment.outputs.result }},
              state: 'success',
              environment_url: 'https://yourdomain.com'
            });

      - name: Update deployment status (failure)
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.deployment.outputs.result }},
              state: 'failure'
            });

  # Performance Testing
  performance-test:
    needs: [deploy-staging]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run performance tests
        uses: grafana/k6-action@v0.3.1
        with:
          filename: tests/performance/load-test.js
        env:
          BASE_URL: ${{ secrets.STAGING_URL }}

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: results.json

  # Cleanup
  cleanup:
    needs: [deploy-production, deploy-staging]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Clean up old images
        uses: actions/github-script@v6
        with:
          script: |
            const images = await github.rest.packages.getAllPackageVersionsForPackageOwnedByOrg({
              package_type: 'container',
              package_name: context.repo.repo + '-backend',
              org: context.repo.owner
            });
            
            const oldImages = images.data.filter(image => {
              const createdAt = new Date(image.created_at);
              const cutoff = new Date();
              cutoff.setDate(cutoff.getDate() - 30);
              return createdAt < cutoff;
            });
            
            for (const image of oldImages) {
              await github.rest.packages.deletePackageVersionForOrg({
                package_type: 'container',
                package_name: context.repo.repo + '-backend',
                org: context.repo.owner,
                package_version_id: image.id
              });
            }