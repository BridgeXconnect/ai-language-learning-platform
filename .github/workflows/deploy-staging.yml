name: Deploy to Staging

on:
  push:
    branches: [ develop ]
  workflow_dispatch:

jobs:
  deploy-staging:
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: ./client/package-lock.json
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    
    - name: Build and tag images
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ai-language-learning-platform
        IMAGE_TAG: staging-${{ github.sha }}
      run: |
        # Build client
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY-client:$IMAGE_TAG ./client
        
        # Build server
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY-server:$IMAGE_TAG ./server
        
        # Build agents
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY-orchestrator:$IMAGE_TAG ./agents/orchestrator
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY-course-planner:$IMAGE_TAG ./agents/course-planner
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY-content-creator:$IMAGE_TAG ./agents/content-creator
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY-quality-assurance:$IMAGE_TAG ./agents/quality-assurance
    
    - name: Run security scan
      run: |
        # Install Trivy
        sudo apt-get update
        sudo apt-get install wget apt-transport-https gnupg lsb-release
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
        echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
        sudo apt-get update
        sudo apt-get install trivy
        
        # Scan images
        trivy image --exit-code 0 --severity HIGH,CRITICAL $ECR_REGISTRY/$ECR_REPOSITORY-server:staging-${{ github.sha }}
    
    - name: Push images to ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ai-language-learning-platform
        IMAGE_TAG: staging-${{ github.sha }}
      run: |
        docker push $ECR_REGISTRY/$ECR_REPOSITORY-client:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY-server:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY-orchestrator:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY-course-planner:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY-content-creator:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY-quality-assurance:$IMAGE_TAG
    
    - name: Deploy to EKS
      run: |
        aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ai-language-learning-staging
        
        # Update deployment manifests with new image tags
        sed -i "s|IMAGE_TAG|staging-${{ github.sha }}|g" k8s/staging/*.yaml
        sed -i "s|ECR_REGISTRY|${{ steps.login-ecr.outputs.registry }}|g" k8s/staging/*.yaml
        
        # Apply deployments
        kubectl apply -f k8s/staging/
        
        # Wait for deployments to complete
        kubectl rollout status deployment/client-deployment -n staging
        kubectl rollout status deployment/server-deployment -n staging
        kubectl rollout status deployment/orchestrator-deployment -n staging
        kubectl rollout status deployment/course-planner-deployment -n staging
        kubectl rollout status deployment/content-creator-deployment -n staging
        kubectl rollout status deployment/quality-assurance-deployment -n staging
    
    - name: Run smoke tests
      run: |
        # Wait for services to be ready
        sleep 120
        
        # Get service endpoint
        STAGING_URL=$(kubectl get service client-service -n staging -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
        
        # Run basic health checks
        curl -f $STAGING_URL/health || exit 1
        curl -f $STAGING_URL/api/health || exit 1
        
        # Run API tests
        npm install -g newman
        newman run postman/staging-tests.json --env-var baseUrl=$STAGING_URL
    
    - name: Update deployment status
      if: always()
      run: |
        if [ ${{ job.status }} == 'success' ]; then
          echo "‚úÖ Staging deployment successful"
          echo "üîó Staging URL: https://$STAGING_URL"
        else
          echo "‚ùå Staging deployment failed"
          # Rollback on failure
          kubectl rollout undo deployment/client-deployment -n staging
          kubectl rollout undo deployment/server-deployment -n staging
          kubectl rollout undo deployment/orchestrator-deployment -n staging
          kubectl rollout undo deployment/course-planner-deployment -n staging
          kubectl rollout undo deployment/content-creator-deployment -n staging
          kubectl rollout undo deployment/quality-assurance-deployment -n staging
        fi
    
    - name: Notify teams
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        message: |
          Staging deployment ${{ job.status }}
          üîó Staging URL: https://$STAGING_URL
          üìä Commit: ${{ github.sha }}
          üë§ Author: ${{ github.actor }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}