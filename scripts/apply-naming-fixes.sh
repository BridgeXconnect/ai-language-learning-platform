#!/bin/bash

# Apply Naming Convention Fixes
# Safely applies the fixes generated by the naming convention checker

set -e

PROJECT_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
REPORT_FILE="$PROJECT_ROOT/refactoring-reports/naming-conventions-report.json"

echo "üîß Applying naming convention fixes..."

if [ ! -f "$REPORT_FILE" ]; then
    echo "‚ùå Report file not found. Run naming convention check first:"
    echo "   python3 scripts/enforce-naming-conventions.py"
    exit 1
fi

# Parse report and apply fixes
python3 << EOF
import json
import os
import shutil
from pathlib import Path

report_file = "$REPORT_FILE"
project_root = "$PROJECT_ROOT"

with open(report_file, 'r') as f:
    report = json.load(f)

fixes = report.get('fixes', [])
applied = 0
failed = 0

print(f"üìù Found {len(fixes)} fixes to apply...")

for fix in fixes:
    try:
        old_path = Path(fix['old_path'])
        new_path = Path(fix['new_path'])
        
        if old_path.exists():
            # Create backup
            backup_dir = Path(project_root) / "refactoring-backups" / "naming-fixes"
            backup_dir.mkdir(exist_ok=True, parents=True)
            backup_file = backup_dir / old_path.name
            shutil.copy2(old_path, backup_file)
            
            # Apply fix
            old_path.rename(new_path)
            print(f"  ‚úì {old_path.name} ‚Üí {new_path.name}")
            applied += 1
        else:
            print(f"  ‚ö†Ô∏è  File not found: {old_path}")
            
    except Exception as e:
        print(f"  ‚ùå Failed to rename {fix['old_path']}: {e}")
        failed += 1

print(f"\nüìä Applied {applied} fixes")
if failed > 0:
    print(f"‚ö†Ô∏è  {failed} fixes failed")
