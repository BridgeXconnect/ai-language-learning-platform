I need you to create a specialized AI agent for my language learning platform using Archon framework.
        
        Current Architecture:
        - FastAPI backend with Supabase database
        - Next.js frontend  
        - Docker containerized services
        - Existing AI services (ai_service, rag_service, course_generation_service)
        
        Database Schema (relevant tables):
        - course_requests: id, company_name, industry, training_goals, current_english_level
        - sop_documents: id, course_request_id, file_path, processing_status
        - courses: id, title, description, cefr_level, status
        - modules: id, course_id, title, description, order_index
        - lessons: id, module_id, title, content, duration_minutes
        
        
        AGENT TO CREATE: Quality Assurance Specialist (quality-assurance)
        
        Description: Reviews and improves generated course content for quality and effectiveness
        
        Key Responsibilities:
        - Review content for CEFR level appropriateness
- Check grammatical accuracy and clarity
- Validate exercise effectiveness and variety
- Ensure cultural sensitivity and inclusivity
- Provide improvement recommendations
        
        Required Tools:
        - content_quality_analyzer
- cefr_level_validator
- grammar_checker
- cultural_sensitivity_checker
        
        Database Interactions:
        - Read generated content from lessons and exercises
- Update content with quality improvements
- Log quality metrics and feedback
        
        Please create:
        1. A complete Pydantic AI agent with proper system prompt
        2. Tool implementations for all required tools
        3. Dockerfile for containerization  
        4. FastAPI server wrapper with health endpoints
        5. MCP server implementation for agent communication
        6. Requirements.txt with all dependencies
        
        The agent should:
        - Connect to Supabase using environment variables
        - Use OpenAI GPT-4 as the language model
        - Include comprehensive error handling and logging
        - Follow the existing code patterns in the platform
        - Be production-ready with proper validation
        
        File structure should be:
        ```
        agents/quality-assurance/
        ├── main.py              # Main agent implementation
        ├── tools.py             # Tool implementations  
        ├── server.py            # FastAPI server wrapper
        ├── mcp_server.py        # MCP server implementation
        ├── Dockerfile           # Container definition
        ├── requirements.txt     # Python dependencies
        └── README.md           # Agent documentation
        ```